[alias]
    # View all alias
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
    # Make a new branch
    make = checkout -b
    # Save your commit
    save = commit -m
    # View a more decorative log
    history = log --oneline --decorate --graph
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"
    # Pull our common branches
    pullall = !"git live; git pull; git dev; git pull; git test; git pull; git live"
    # Push our common branches
    pushall = !"git live; git push origin master; git dev; git push origin dev; git test; git push origin test_dev; git live"
    # `git credit $name $email` Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # `git reb $number` Interactive rebase with the given `$number` of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Stages all missing files for delete
    r = !git ls-files -z --deleted | xargs -0 git rm
    # Undo a `git push`
    undopush = push -f origin HEAD^:master
    # Check a branch against its remote
    check = "!c() { git log -p $1 ^origin/$1; }; c"
    # Throw away the last commit
    ohshit = reset --hard HEAD^
    # Throw away everything since last push
    ohfuck = "!fuck() { git fetch origin; git reset --hard origin/$1; }; fuck"
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -av
    remotes = remote -v
    # Common branches
    live = checkout master
    dev = checkout dev
    test = checkout test_dev

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[branch "master"]
    # Use `origin` as the default remote on the `master` branch in all cases
    #remote = origin
    #merge = refs/heads/master

[credential]
    # Save credentials in cleartext on the system
    #helper = store

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Set Sublime Text 2 as GIT_EDITOR in Windows
    #editor = 'C:\\Program Files\\Sublime Text 2\\sublime_text.exe' -w
    # Set Sublime Text 2 as GIT_EDITOR in OS X [https://help.github.com/articles/using-sublime-text-2-as-your-default-editor]
    #editor = subl -n -w
    # Enforces some of my whitespace preferences
    whitespace = space-before-tab,indent-with-non-tab,trailing-space

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
[color "branch"]
    current = yellow bold
    local = green bold
    remote = magenta bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = cyan bold
    updated = green bold
    changed = red bold
    untracked = magenta bold
    branch = yellow bold

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]
    default = simple

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

[user]
    name = Miles Rausch
    #email = 
